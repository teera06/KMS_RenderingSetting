객체지향을 왜 하는거야?

class UEngineDirectory : public UEnginePath
{
	std::filesystem::path Path;
}

std::filesystem::path Path; 그냥 사용하지 않고
굳이 클래스를 만들어서 

1. 첫번째 그안에서 내가 정말 필요한 기능만을 외부에 공개하기 위해서
   내가 새로운 기능이 필요하면 그걸 인지하고 새로운 함수를 만들어 나갈것이다.
   내가 인지한다는게 중요하다.

2. 외부에 드러나는 코드를 간결하게 만들고 사용성을 증대시키기 위해서입니다.
   걷으로 드러나는 사용성은 한줄이면 되지만 내부에서 내가 만든 코드가
   돌아가고 있다는것을 잊으면 안됩니다. 그걸 사용하는 사람은 편하게 사용할수 있게 만들기 위해서

3. 개념화를 시켜서 책임을 몰아주고 단일화 시킨다. 
   => 코드를 어디다 짜야해?
   => 이 기능은 어디다 만들어야해?
   => 디렉토리에 관련된 기능 => UEngineDirectory
   객체지향은 한 클래스에 다양한 개념이 섞이는걸 좋아하지 않아요.
   SOILD라는 객체지향 설계 원칙중 단일책임의 원칙이라고 합니다.
   한클래스가 너무 많은 개념(책임) 
   UEngineDirectory => 디렉토리에 관련된 일에 대한 책임을 진다.

   UEngineIO UEnginePath => 파일 경로 디렉토리 모든걸 맡으면???????
   한파일에 코드가 너무 몰리고 알아보기 힘들게 되기 때문이다.

4. 각자의 분산된 책임으로 다수가 일할때 편해진다.
   회사에서 일하기 위해서야. 분업화가 쉬어진다. => 생산성이 증가한것입니다.
   속력 이런거 다 필요없고 => 다수가 더 빠르게 만들기 쉬어졌다.

      